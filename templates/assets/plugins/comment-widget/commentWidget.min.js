/* global document, window, localStorage, alert */
// 优化重构后的代码如下
(function (global) {
  // 工具函数
  function $(selector, context) {
    if (typeof document === "undefined") return null;
    var ctx = context || document;
    return ctx.querySelector(selector);
  }
  /**
   * @param {Date | string | number} date - 需要格式化的日期，可以是Date对象、时间戳或可被Date解析的字符串
   * @returns {string} - 返回类似“3分钟前”、“2小时前”、“5日前”、“1周前”、“2月前”或“2023-05-01”
   */
  function formatTime(date) {
    const d = date instanceof Date ? date : new Date(date);
    const now = new Date();
    const diffMillis = now.getTime() - d.getTime();
    const minutes = Math.floor(diffMillis / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(diffMillis / 86400000);
    const weeks = Math.floor(days / 7);
    const months = Math.floor(days / 30);

    if (days === 0) {
      if (minutes >= 1 && minutes < 60) {
        return `${minutes}分钟前`;
      }
      if (minutes >= 60 && hours < 24) {
        return `${hours}小时前`;
      }
    }
    if (days >= 1 && days < 7) {
      return `${days}天前`;
    }
    if (days >= 7 && days <= 30) {
      return `${weeks}周前`;
    }
    if (days > 30 && days <= 365) {
      return `${months}月前`;
    }
    if (days > 365) {
      // 补零
      const y = d.getFullYear();
      const m = String(d.getMonth() + 1).padStart(2, "0");
      const day = String(d.getDate()).padStart(2, "0");
      return `${y}-${m}-${day}`;
    }
    return "刚刚";
  }
  function $$(selector, context) {
    if (typeof document === "undefined") return [];
    var ctx = context || document;
    return Array.from(ctx.querySelectorAll(selector));
  }
  function createEl(tag, className = "") {
    if (typeof document === "undefined") return null;
    var el = document.createElement(tag);
    if (className) el.className = className;
    return el;
  }
  function escapeHTML(str) {
    return String(str)
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#39;");
  }
  function getFromLocal(key) {
    if (typeof localStorage === "undefined") return {};
    try {
      return JSON.parse(localStorage.getItem(key) || "{}") || {};
    } catch {
      return {};
    }
  }
  function setToLocal(key, value) {
    if (typeof localStorage === "undefined") return;
    localStorage.setItem(key, JSON.stringify(value));
  }
  function isEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }
  function showMessage(type, msg) {
    if (global.main && global.main.useMessage) {
      var Message = global.main.useMessage().Message;
      Message[type] && Message[type](msg);
    } else if (typeof alert !== "undefined") {
      var alertFn = alert;
      alertFn(msg);
    }
  }

  // 配置和状态
  const commentConfig = {
    version: "v1alpha1",
    emailKind: "Email",
    emailHash: "email-hash",
    commentIndex: "thyuu.xingdu.comment.kunkunyu.com/index",
    defaultAvatar: "https://weavatar.com/avatar/?s=64&d=mm&r=g",
  };
  const commentState = {
    allowAnonymousComments: false,
    currentUser: null,
    roles: null,
    globalinfo: null,
    props: null,
    domId: null,
    isSubmitting: false,
    isPreview: false,
  };

  // 主对象
  const commentWidget = {
    handleError(error, message = "操作失败，请稍后重试") {
      console.error(error);
      showMessage("error", error instanceof Error ? error.message : message);
    },
    respond() {
      // 渲染评论表单
      const htmlArr = [];
      htmlArr.push(
        `<div id="form-title" class="flex items-center mb-[1em] gap-2 text-zinc-600 dark:text-zinc-400">`,
        `<i class="iconfont icon-comment !text-[20px]"></i> <span id="form-top-title">来几句走心的评论吧</span>`,
        `</div>`
      );
      const needLogin = !commentState.currentUser && !commentState.allowAnonymousComments;
      if (needLogin) {
        htmlArr.push(
          `<button class="inline-flex mb-6 items-center gap-2 justify-center rounded-lg py-2 px-3 text-sm outline-offset-2 transition active:transition-none bg-zinc-800 font-semibold text-zinc-100 hover:bg-zinc-700 active:bg-zinc-800 active:text-zinc-100/70 dark:bg-zinc-200 dark:text-black dark:hover:bg-zinc-300 dark:active:bg-zinc-300/70" type="button" onclick="commentWidget.handleOpenLoginPage();"><svg width="1em" height="1em" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="mr-1 h-5 w-5"><path d="M11 15H7C4.79086 15 3 16.7909 3 19C3 20.1046 3.89543 21 5 21H15M16.8744 13C16.2164 13.4935 15.6221 14.066 15.1049 14.7043C15.035 14.7906 15 14.8953 15 15M16.8744 17C16.2164 16.5065 15.6221 15.934 15.1049 15.2957C15.035 15.2094 15 15.1047 15 15M15 15H21M15 7C15 9.20914 13.2091 11 11 11C8.79086 11 7 9.20914 7 7C7 4.79086 8.79086 3 11 3C13.2091 3 15 4.79086 15 7Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>登录后才可以留言噢</button>`
        );
      }
      const canComment = commentState.currentUser || commentState.allowAnonymousComments;
      if (canComment) {
        htmlArr.push(this.renderInputArea());
      }
      const respondEl = $("#respond");
      if (respondEl) respondEl.innerHTML = htmlArr.join("");
    },
    renderInputArea() {
      const props = commentState.props;
      return [
        `<div id="commentform" class="mb-6 group comment-form relative flex w-full flex-col rounded-xl bg-gradient-to-b from-zinc-50/50 to-white/70 p-3 pb-6 shadow-xl shadow-zinc-500/10 ring-2 ring-zinc-200/30 transition-opacity [--spotlight-color:rgb(236_252_203_/_0.25)] dark:from-zinc-900/70 dark:to-zinc-800/60 dark:shadow-zinc-700/10 dark:ring-zinc-700/30 dark:[--spotlight-color:rgb(217_249_157_/_0.04)] md:p-4">`,
        `<div id="reply-wrap" style="display:none" class="flex -mt-2 items-center justify-between text-xs text-zinc-600 dark:text-zinc-200">`,
        `<span> 回复给： <b id="reply-title">三禾木木</b></span>`,
        `<button id="cancel-comment-reply-link"><i class="iconfont icon-close !text-xs"></i></button>`,
        `</div>`,
        `<div style="display:none" class="h-[1px] mb-1 bg-zinc-100 dark:bg-zinc-800 mt-1"></div>`,
        `<textarea rows="4" id="comment" name="comment" class="block resize-none w-full shrink-0 border-0 bg-transparent p-0 text-sm leading-6 text-zinc-800 placeholder-zinc-400 outline-none focus:outline-none focus:ring-0 dark:text-zinc-200 dark:placeholder-zinc-500" placeholder="说点什么吧，万一火不了呢..."></textarea>`,
        `<div id="comment__message" class="comment__message hidden min-h-[96px] flex-1 shrink-0 text-sm text-zinc-800 dark:text-zinc-200"></div>`,

        `<span class="flex-1 shrink-0 select-none text-[10px] text-zinc-500 transition-opacity opacity-100">支持 <b>Markdown</b> 与 <a class="inline-flex place-items-baseline items-baseline gap-0.5 pr-0.5 text-[0.95em] leading-none font-bold hover:underline" rel="noopener noreferrer" target="_blank" href="https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">GFM<svg width="0.95em" height="0.95em" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="inline-block translate-y-0.5" aria-hidden="true"><path d="M20 13.5001C20 14.8946 20 15.5919 19.8618 16.1673C19.4229 17.9956 17.9955 19.423 16.1672 19.8619C15.5918 20.0001 14.8945 20.0001 13.5 20.0001H12C9.19974 20.0001 7.79961 20.0001 6.73005 19.4551C5.78924 18.9758 5.02433 18.2109 4.54497 17.2701C4 16.2005 4 14.8004 4 12.0001V11.5001C4 9.17035 4 8.0055 4.3806 7.08664C4.88807 5.8615 5.86144 4.88813 7.08658 4.38066C7.86344 4.05888 8.81614 4.00915 10.5 4.00146M19.7597 9.45455C20.0221 7.8217 20.0697 6.16984 19.9019 4.54138C19.8898 4.42328 19.838 4.31854 19.7597 4.24027M19.7597 4.24027C19.6815 4.16201 19.5767 4.11023 19.4586 4.09806C17.8302 3.93025 16.1783 3.97792 14.5455 4.24027M19.7597 4.24027L10 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></a>
        </span>`,
        `<div class="h-[1px] bg-zinc-100 dark:bg-zinc-700 mt-1 opacity-25 transition-all duration-[325]"></div>`,
        `<footer class="relative -mb-1.5 mt-2 flex min-h-5 w-full items-center justify-between">`,
        `<div class="flex-1 flex-wrap shrink-0 items-center flex border-t-1 gap-2">`,
        `<input type="text" id="author" name="author" autocomplete="name" aria-required="true" class="comment-form-author md:w-auto w-full bg-transparent p-0 text-sm leading-6 text-zinc-600 placeholder-zinc-400 outline-none focus:outline-none focus:ring-0 dark:text-zinc-400 dark:placeholder-zinc-500" placeholder="名称" required />`,
        `<div class="md:w-[1px] w-full bg-zinc-100 dark:bg-zinc-800 md:h-4 h-[1px]"></div>`,
        `<input type="text" id="email" name="email" autocomplete="email" aria-required="true" required class="comment-form-email w-full md:w-auto md:min-w-[200px] bg-transparent p-0 text-sm leading-6 text-zinc-600 placeholder-zinc-400 outline-none focus:outline-none focus:ring-0 dark:text-zinc-400 dark:placeholder-zinc-500" placeholder="邮箱" />`,
        `<div class="md:w-[1px] w-full bg-zinc-100 dark:bg-zinc-800 md:h-4 h-[1px]"></div>`,
        `<input type="text" autocomplete="url" id="url" name="url" aria-required="true" required class="comment-form-url w-full md:w-auto md:min-w-[200px] bg-transparent p-0 text-sm leading-6 text-zinc-600 placeholder-zinc-400 outline-none focus:outline-none focus:ring-0 dark:text-zinc-400 dark:placeholder-zinc-500" placeholder="博客链接" />`,
        `<input type="hidden" name="comment_post_ID" value="${props.name}" id="comment_post_ID">`,
        `<input type="hidden" name="comment_kind" value="${props.kind}" id="comment_kind">`,
        `<input type="hidden" name="comment_group" value="${props.group}" id="comment_group">`,
        `<input type="hidden" name="comment_parent" id="comment_parent" value="0">`,
        `<input type="hidden" name="logged_in" id="logged_in" value="${commentState.currentUser ? "1" : "0"}">`,
        `</div>`,
        `<div class="md:w-[1px] w-0 bg-zinc-200 dark:bg-zinc-700 h-4 mx-2 "></div>`,
        `<aside class="flex flex-col md:flex-row select-none items-center gap-2.5">`,
        `<button data-tooltip="预览一下" id="previewMd" class="appearance-none"  onclick="commentWidget.togglePreview(this)" data-state="closed" tabindex="0">`,
        `<i class="iconfont icon-preview text-xl text-zinc-800 dark:text-zinc-200"></i>`,
        `</button>`,
        `<div class="emoji-btn emoticon">`,
        `<button id="emoji-button" style="width: 14px; height: 14px;"><i class="iconfont icon-smile"></i></button>`,
        `<div id="emoji-area" class="emoticon-panel bg-zinc-100 dark:bg-zinc-800">`,
        `<emoji-panel id="emoji-panel"></emoji-panel>`,
        `</div>`,
        `</div>`,
        `<button class="appearance-none" type="submit" id="submit" onclick="commentWidget.onSubmit()" data-state="closed" tabindex="0">`,
        `<i class="iconfont icon-send text-xl text-zinc-800 dark:text-zinc-200"></i>`,
        `</button>`,
        `</aside>`,
        `</footer>`,
        `</div>`,
      ].join("");
    },
    intComments(comments) {
      const replyTitle = $("#form-top-title");
      if (replyTitle) replyTitle.innerText = `共 ${comments.total} 次讨论`;
      const html = comments.total === 0 ? "" : this.buildCommentList(comments) + this.getPagination(comments);
      const commentsContainer = $("#comments");
      if (commentsContainer) commentsContainer.innerHTML = html;
    },
    getOwnerAvatar(avatar) {
      return avatar || commentConfig.defaultAvatar;
    },
    getUserWebsiteLink(website, displayName) {
      let html = '<div class="author has-line-clamp">';
      const escapedDisplayName = escapeHTML(displayName);
      if (website && website !== "") {
        if (!/^http[s]?:\/\//.test(website)) website = "https://" + website;
        html += `<a target="_blank" href="${escapeHTML(
          website
        )}" class="dont-replace url hover:underline" rel="ugc external nofollow">${escapedDisplayName}</a>`;
      } else {
        html += `${escapedDisplayName}`;
      }
      html += "</div>";
      return html;
    },
    buildCommentItem(comment) {
      const commentName = comment.metadata.name;
      const commentOwnerName = comment.owner.displayName;
      let ownerAvatar = this.getOwnerAvatar(comment.owner.avatar);
      if (commentState.props.useAvatarProvider) {
        ownerAvatar = this.applyCommentPolicy(
          comment?.spec.owner.annotations?.[commentConfig.emailHash],
          comment?.owner.kind,
          comment.owner.avatar
        );
      }
      const websiteLink = this.getUserWebsiteLink(comment.spec.owner.annotations?.website, commentOwnerName);
      const escapedRaw = comment.spec.content;
      let html = `<li id="comment-${commentName}" class="comment depth-1 fade-before relative list-none p-0 m-0 pb-8"> \
        <span class="absolute left-5 top-14 -ml-px h-[calc(100%-4.5rem)] w-0.5 rounded bg-zinc-200 dark:bg-zinc-800" aria-hidden="true"></span>\
        <article class="comment-body relative flex items-start space-x-3">\
          <img alt="" src="${ownerAvatar}" class="h-10 w-10 flex-shrink-0 rounded-full bg-zinc-200 ring-2 ring-zinc-200 dark:bg-zinc-800 dark:ring-zinc-800" height="50" width="50" loading="lazy" decoding="async">\
          <div class="-mt-1 flex flex-wrap min-w-0 flex-1 items-center gap-3">\
            ${websiteLink}\
            <time datetime="${
              comment.metadata.creationTimestamp
            }" class="inline-flex select-none text-[12px] font-medium opacity-40">${formatTime(
        comment.metadata.creationTimestamp
      )}</time>\
            <div class="comment-meta">\
              ${
                commentState.currentUser || commentState.allowAnonymousComments
                  ? `<a rel="nofollow" class="dont-replace comment-reply-link flex group rounded-full bg-gradient-to-b from-zinc-50/50 to-white/90 px-2 shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur transition dark:from-zinc-900/50 dark:to-zinc-800/90 dark:ring-white/10 dark:hover:ring-white/20 !leading-[1]" href="?replytocom=${commentName}#respond" data-commentid="${commentName}" data-postid="${commentState.props.name}" data-belowelement="div-comment-${commentName}" data-respondelement="commentform" data-replyto="${commentOwnerName}" aria-label="${commentOwnerName}"><i class="iconfont icon-reply !text-xs !leading-[1.5]"></i></a>`
                  : ""
              }
            </div>\
          </div>\
        </article>\
        <div id="div-comment-${commentName}" class="comment-content comment__message mb-[1em] text-sm -mt-4 pl-[3.25rem]">${escapedRaw}</div>`;
      if (comment.replies.total > 0) {
        html += this.getReplyItem(comment.replies, commentOwnerName, commentName);
      }
      if (comment.replies.hasNext) {
        html += this.getRepliesNext(comment.replies.page, commentOwnerName, commentName);
      }
      html += "</li>";
      return html;
    },
    buildCommentList(comments) {
      return ['<ol class="comment-list">', ...comments.items.map((item) => this.buildCommentItem(item)), "</ol>"].join(
        ""
      );
    },
    fetchNext(page, commentOwnerName, commentName) {
      this.fetchReplies(page, commentOwnerName, commentName, true);
    },
    getQuoteReply(replies, quoteReplyName) {
      if (!quoteReplyName) return undefined;
      return replies.find((reply) => reply.metadata.name === quoteReplyName);
    },
    getReplyItem(replies, commentOwnerName, commentName) {
      const htmlArr = [`<ul class="children pl-[3.25rem]" id="children-${commentName}">`];
      for (let i = 0; i < replies.items.length; i++) {
        const reply = replies.items[i];
        const replyName = reply.metadata.name;
        const replyOwnerName = reply.owner.displayName;
        let ownerAvatar = reply.owner.avatar ? reply.owner.avatar : commentConfig.defaultAvatar;
        if (commentState.props.useAvatarProvider) {
          ownerAvatar = this.applyCommentPolicy(
            reply?.spec.owner.annotations?.[commentConfig.emailHash],
            reply?.owner.kind,
            reply.owner.avatar
          );
        }
        const websiteLink = this.getUserWebsiteLink(reply.spec.owner.annotations?.website, replyOwnerName);
        const quoteReply = reply.spec.quoteReply;
        const quoteReplys = this.getQuoteReply(replies.items, quoteReply);
        const escapedRaw = reply.spec.content;
        htmlArr.push(
          `<li id="reply-${replyName}" class="comment alt depth-2 relative list-none p-0 m-0 mb-[1em]" parent="${commentName}">`,
          `<article class="comment-body relative flex items-start space-x-3">`,
          `<img alt="" src="${ownerAvatar}" class="h-6 w-6 flex-shrink-0 rounded-full bg-zinc-200 ring-2 ring-zinc-200 dark:bg-zinc-800 dark:ring-zinc-800" height="50" width="50" loading="lazy" decoding="async">`,
          `<div class="-mt-1 flex flex-wrap min-w-0 flex-1 items-center gap-x-3">`,
          `${websiteLink}`,
          `<time datetime="${
            reply.metadata.creationTimestamp
          }" class="inline-flex select-none text-[12px] font-medium opacity-40">${formatTime(
            reply.metadata.creationTimestamp
          )}</time>`,
          `<span class="text-sm">回复</span>`,
          `${
            !quoteReply || !quoteReplys
              ? `<a class="comment-at has-line-clamp hover:underline dont-replace" role="button" href="#comment-${commentName}">${commentOwnerName}</a>`
              : `<a class="comment-at has-line-clamp hover:underline dont-replace" role="button" href="#reply-${quoteReply}">${quoteReplys?.spec.owner.displayName}</a>`
          }
          <div class="comment-meta">`,
          `${
            commentState.currentUser || commentState.allowAnonymousComments
              ? `<a rel="nofollow" class="cursor-pointer flex comment-reply-link group rounded-full bg-gradient-to-b from-zinc-50/50 to-white/90 px-2 shadow-lg shadow-zinc-800/5 ring-1 ring-zinc-900/5 backdrop-blur transition dark:from-zinc-900/50 dark:to-zinc-800/90 dark:ring-white/10 dark:hover:ring-white/20 !leading-[1]" data="?replytocom=${replyName}#respond" data-commentid="${replyName}" data-postid="${commentState.props.name}" data-belowelement="div-comment-${replyName}" data-respondelement="commentform" data-replyto="${replyOwnerName}" aria-label="${replyOwnerName}"><i class="iconfont icon-reply !text-xs !leading-[1.5]"></i></a>`
              : ""
          }
          </div>`,
          `</div>`,
          `</article>`,
          `<div id="div-comment-${replyName}" class="comment-content comment__message mb-1 text-sm pl-8">${escapedRaw}</div>`,
          `</li>`
        );
      }
      htmlArr.push("</ul>");
      return htmlArr.join("");
    },
    getPagination(comments) {
      const page = comments.page;
      const totalPages = comments.totalPages;
      if (totalPages <= 1) return "";
      const htmlArr = ['<nav class="navigation navigation-comment">'];
      if (page !== 1) {
        htmlArr.push(
          `<a class="prev page-numbers" onclick="commentWidget.gotoPage(${
            page - 1
          })"><button class="button prev has-thyuu-color has-btn-effect"><span class="btn-meta">此前评论</span></button></a>`
        );
      }
      if (page > 2) {
        htmlArr.push(
          `<a class="page-numbers" onclick="commentWidget.gotoPage(1)">1</a>`,
          page !== 3 ? '<span class="page-numbers dots">…</span>' : ""
        );
      }
      for (let index = page - 1; index <= page + 1; index++) {
        if (index > 0 && index <= totalPages) {
          if (page === index) {
            htmlArr.push(`<span aria-current="page" class="page-numbers current">${page}</span>`);
          } else {
            htmlArr.push(`<a class="page-numbers" onclick="commentWidget.gotoPage(${index})">${index}</a>`);
          }
        }
      }
      if (totalPages - page >= 2) {
        htmlArr.push(
          totalPages - page !== 2 ? '<span class="page-numbers dots">…</span>' : "",
          `<a class="page-numbers" onclick="commentWidget.gotoPage(${totalPages})">${totalPages}</a>`
        );
      }
      if (page !== totalPages) {
        htmlArr.push(
          `<a class="next page-numbers" onclick="commentWidget.gotoPage(${
            page + 1
          })"><button class="button next has-thyuu-color has-btn-effect"><span class="btn-meta">此后评论</span></button></a>`
        );
      }
      htmlArr.push("</nav>");
      return htmlArr.join("");
    },
    gotoPage(page) {
      this.fetchComments(page, true);
    },
    async fetchReplies(page, commentOwnerName, commentName, append) {
      const commentEl = $(`#comment-${commentName}`);
      if (!commentEl) return;
      commentEl.appendChild(this.loadingBlock());
      try {
        const queryParams = [`page=${page || 0}`, `size=${commentState.props.replySize}`].join("&");
        const response = await fetch(`/apis/api.halo.run/v1alpha1/comments/${commentName}/reply?${queryParams}`);
        if (!response.ok) throw new Error("加载回复列表失败，请稍后重试");
        const data = await response.json();
        const loadingBlock = commentEl.querySelector(".loading-block");
        if (loadingBlock) loadingBlock.remove();
        if (data.total > 0) {
          const newHTML = this.getReplyItem(data, commentOwnerName, commentName);
          if (append) {
            const childrenEl = $(`#children-${commentName}`);
            if (childrenEl) {
              childrenEl.insertAdjacentHTML("beforeend", newHTML);
              if (data.hasNext) {
                const nextBtn = $(`#next-${commentName} a`);
                if (nextBtn) {
                  nextBtn.onclick = () => {
                    commentWidget.fetchNext(data.page + 1, commentOwnerName, commentName);
                  };
                }
              } else {
                const nextDiv = $(`#next-${commentName}`);
                if (nextDiv) nextDiv.remove();
              }
            }
          } else {
            const parentElement = $(`#children-${commentName}`);
            const commentElement = $(`#comment-${commentName}`);
            const nextDiv = $(`#next-${commentName}`);
            if (nextDiv) nextDiv.remove();
            const repliesNext = this.getRepliesNext(data.page, commentOwnerName, commentName);
            if (!parentElement) {
              let html = newHTML;
              if (data.hasNext) html += repliesNext;
              if (commentElement) commentElement.insertAdjacentHTML("beforeend", html);
            } else {
              parentElement.innerHTML = newHTML;
              if (data.hasNext && commentElement) commentElement.insertAdjacentHTML("beforeend", repliesNext);
            }
          }
        }
      } catch (error) {
        showMessage("error", error instanceof Error ? error.message : error);
      }
    },
    async fetchComments(page, scrollIntoView) {
      try {
        const props = commentState.props;
        const queryParams = [
          `group=${props.group}`,
          `kind=${props.kind}`,
          `name=${props.name}`,
          `page=${page}`,
          `size=${props.size}`,
          `version=${commentConfig.version}`,
          `withReplies=${props.withReplies}`,
          `replySize=${props.withReplySize}`,
        ].join("&");
        const response = await fetch(`/apis/api.halo.run/v1alpha1/comments?${queryParams}`);
        if (!response.ok) throw new Error("评论列表加载失败，请稍后重试");
        const data = await response.json();
        this.intComments(data);
        this.animateFade();
      } catch (error) {
        this.handleError(error);
      } finally {
        if (scrollIntoView) {
          const props = commentState.props;
          const modifiedGroup = props.group.replace(/\./g, "-");
          const scrollEl = $(`#comment-${modifiedGroup}-${props.kind}-${props.name}`);
          if (scrollEl) {
            scrollEl.scrollIntoView({ block: "start", inline: "start", behavior: "smooth" });
          }
        }
      }
    },
    togglePreview(button) {
      const commentTextarea = $("textarea[name='comment']");
      const commentMessage = $("#comment__message");
      const iconNode = button.children[0];
      if (!commentTextarea || !commentMessage || !iconNode) {
        showMessage("error", "评论区渲染异常，请刷新页面重试");
        return;
      }
      const content = commentTextarea.value.trim();
      if (!content) {
        showMessage("warning", "请输入内容");
        return;
      }
      // marked 需全局引入
      if (typeof marked === "undefined") {
        showMessage("error", "Markdown 解析器未加载");
        return;
      }
      commentMessage.innerHTML = marked.parse(content);
      const isPreview = commentState.isPreview;
      iconNode.classList.toggle("icon-preview", isPreview);
      iconNode.classList.toggle("icon-unpreview", !isPreview);
      button.dataset.tooltip = isPreview ? "预览一下" : "取消预览";
      commentMessage.style.display = isPreview ? "none" : "block";
      commentTextarea.style.display = isPreview ? "block" : "none";
      commentState.isPreview = !isPreview;
    },
    async onSubmit() {
      if (commentState.isSubmitting) return;
      commentState.isSubmitting = true;
      setTimeout(() => {
        commentState.isSubmitting = false;
      }, 1000);
      const parent = $("#comment_parent")?.value;
      if (parent === "0") {
        await this.baseForm();
      } else {
        await this.replyForm();
      }
    },
    async baseForm() {
      const displayName = $("#author")?.value;
      const email = $("#email")?.value;
      const website = $("#url")?.value;
      const content = $("#comment")?.value;
      const commentRequest = {
        raw: content,
        // escapeHTML
        content: marked.parse(content),
        allowNotification: true,
        subjectRef: {
          group: commentState.props.group,
          kind: commentState.props.kind,
          name: commentState.props.name,
          version: commentConfig.version,
        },
      };
      if (commentState.currentUser || commentState.allowAnonymousComments) {
        if (!commentState.currentUser && commentState.allowAnonymousComments) {
          if (!displayName || !email) return;
          if (!content) return showMessage("warning", "请输入内容");
          if (!isEmail(email)) return showMessage("warning", "邮箱格式不正确");
          commentRequest.owner = { displayName, email, website };
          setToLocal("halo-comment-custom-account", { displayName, email, website });
        }
        if (content) {
          try {
            const response = await fetch("/apis/api.halo.run/v1alpha1/comments", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(commentRequest),
            });
            if (!response.ok) throw new Error("评论失败，请稍后重试");
            const res = await response.json();
            showMessage("success", res.spec.approved ? "评论成功" : "评论成功，等待审核");
            const commentInput = $("#comment");
            if (commentInput) commentInput.value = "";
            const closeBtn = $(".comment-respond button.close");
            if (closeBtn) closeBtn.click();
            this.fetchComments(1, false);
          } catch (error) {
            this.handleError(error);
          }
        }
      } else {
        showMessage("warning", "请先登录");
      }
    },
    async replyForm() {
      const displayName = $("#author")?.value;
      const email = $("#email")?.value;
      const website = $("#url")?.value;
      const parent = $("#comment_parent")?.value;
      const content = $("#comment")?.value;
      const tmp = $(`#reply-${parent}`)?.getAttribute("parent");
      const replyRequest = { raw: content, content: marked.parse(content), allowNotification: false };
      if (tmp) replyRequest.quoteReply = parent;
      if (commentState.currentUser || commentState.allowAnonymousComments) {
        if (!commentState.currentUser && commentState.allowAnonymousComments) {
          if (!displayName || !email) return;
          if (!content) return;
          if (!isEmail(email)) return;
          replyRequest.owner = { displayName, email, website };
          setToLocal("halo-comment-custom-account", { displayName, email, website });
        }
        if (content) {
          try {
            const response = await fetch(`/apis/api.halo.run/v1alpha1/comments/${tmp || parent}/reply`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(replyRequest),
            });
            if (!response.ok) throw new Error("评论失败，请稍后重试");
            const res = await response.json();
            showMessage("success", res.spec.approved ? "评论成功" : "评论成功，等待审核");
            const closeBtn = $(".comment-respond button.close");
            if (closeBtn) {
              await this.clickCloseButton(closeBtn);
            } else {
              this.replyCloseBtn();
            }
            const commentName = tmp || parent;
            const targetEl = $(`#div-comment-${commentName}`);
            if (targetEl && targetEl.previousElementSibling) {
              const authorA = targetEl.previousElementSibling.querySelector(`.comment-body .author a`);
              const authorDiv = targetEl.previousElementSibling.querySelector(`.comment-body .author`);
              const commentOwnerName = (authorA || authorDiv)?.textContent;
              setTimeout(() => {
                this.fetchReplies(1, commentOwnerName, commentName, false);
              }, 500);
            }
            const commentInput = $("#comment");
            if (commentInput) commentInput.value = "";
          } catch (error) {
            showMessage("error", error instanceof Error ? error.message : error);
          }
        }
      } else {
        showMessage("warning", "请先登录");
      }
    },
    replyCloseBtn() {
      const replyCloseBtn = $("#cancel-comment-reply-link");
      if (replyCloseBtn) replyCloseBtn.click();
    },
    clickCloseButton(closeBtn) {
      return new Promise((resolve) => {
        closeBtn.addEventListener("click", () => resolve());
        closeBtn.click();
        setTimeout(() => {
          this.replyCloseBtn();
        }, 300);
      });
    },
    setCommentInfo() {
      const commentInfo = getFromLocal("halo-comment-custom-account");
      if (Object.keys(commentInfo).length > 0) {
        const emailInput = $("#email");
        const authorInput = $("#author");
        const urlInput = $("#url");
        if (emailInput) emailInput.value = commentInfo.email;
        if (authorInput) authorInput.value = commentInfo.displayName;
        if (urlInput) urlInput.value = commentInfo.website;
      }
    },
    loadingBlock() {
      const loadingBlockDiv = createEl("div", "loading-block");
      loadingBlockDiv.innerHTML = `<svg fill="none" width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle style="opacity: 0.25;" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path style="opacity: 0.75;" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" fill="currentColor"></path></svg><span class="text-xs text-zinc-200 dark:text-zinc-400">加载中...</span>`;
      return loadingBlockDiv;
    },
    getRepliesNext(page, commentOwnerName, commentName) {
      return `<div class="comment-next" id="next-${commentName}"><a class="button" onclick="commentWidget.fetchNext(${
        page + 1
      }, '${commentOwnerName}','${commentName}')">加载更多</a></div>`;
    },
    animateFade() {
      var elements = $$(".fade-before");
      var delay = 150;
      if (typeof window === "undefined" || typeof window.IntersectionObserver === "undefined") return;
      var IntersectionObserverCtor = window.IntersectionObserver;
      var observer = new IntersectionObserverCtor(function (entries, observer) {
        entries.forEach(function (entry, index) {
          if (entry.isIntersecting) {
            setTimeout(function () {
              entry.target.classList.add("fade-after");
            }, index * delay);
            observer.unobserve(entry.target);
          }
        });
      });
      elements.forEach(function (element) {
        observer.observe(element);
      });
    },
    applyCommentPolicy(emailHash, kind, avatar) {
      const policy = commentState.props.avatarPolicy;
      if (policy === "anonymousUser") {
        return kind === commentConfig.emailKind ? this.getAvatarSrc(emailHash) : avatar;
      } else if (policy === "allUser") {
        return this.getAvatarSrc(emailHash);
      } else if (policy === "noAvatarUser") {
        return kind === commentConfig.emailKind || !avatar ? this.getAvatarSrc(emailHash) : avatar;
      }
      return undefined;
    },
    handleOpenLoginPage() {
      if (typeof window !== "undefined") {
        var win = window;
        win.location.href = this.loginUrl(commentState.domId);
      }
    },
    loginUrl(params = "") {
      if (typeof window !== "undefined") {
        var win = window;
        return `/login?redirect_uri=${encodeURIComponent(win.location.pathname + params)}`;
      }
      return "/login";
    },
    getAvatarSrc(emailHash) {
      let url = "https://weavatar.com";
      if (commentState.props.avatarProviderMirror && commentState.props.avatarProviderMirror !== "") {
        url = commentState.props.avatarProviderMirror;
      }
      return `${url}/avatar/${emailHash}?s=64&d=mm&r=g`;
    },
    async fetchGlobalInfo() {
      try {
        const response = await fetch("/actuator/globalinfo", { method: "get", credentials: "same-origin" });
        const data = await response.json();
        commentState.globalinfo = data;
        commentState.allowAnonymousComments = data.allowAnonymousComments;
      } catch (error) {
        console.error("Failed to fetch global info", error);
      }
    },
    async fetchCurrentUser() {
      const response = await fetch("/apis/api.console.halo.run/v1alpha1/users/-");
      const data = await response.json();
      commentState.roles = data.roles;
      commentState.currentUser = data.user.metadata.name === "anonymousUser" ? undefined : data.user;
    },
    postCommentEmoji() {
      const emojiButton = $("#emoji-button");
      const emojiPanel = $("#emoji-panel");
      const emojiArea = $("#emoji-area");
      const commentTextarea = $("textarea[name='comment']");
      if (!emojiButton || !emojiPanel || !emojiArea || !commentTextarea) return;
      emojiButton.addEventListener("click", () => {
        emojiArea.classList.toggle("show");
      });
      emojiPanel.addEventListener("selected", function (event) {
        const emoji = event.detail;
        const { selectionStart, selectionEnd, value } = commentTextarea;
        const newValue = value.substring(0, selectionStart) + emoji + value.substring(selectionEnd);
        commentTextarea.value = newValue;
        commentTextarea.setSelectionRange(selectionStart + emoji.length, selectionStart + emoji.length);
        emojiArea.classList.remove("show");
      });
    },
    async init(id, group) {
      const parent = document.querySelector(id);
      if (!parent) return;
      const comments = createEl("div", "comment-area");
      comments.id = "comments";
      commentState.domId = id;
      commentState.props = group;
      try {
        await Promise.all([this.fetchCurrentUser(), this.fetchGlobalInfo()]);
        this.respond(comments);
        this.setCommentInfo();
        this.postCommentEmoji();
        this.fetchComments(1, false);
        parent.appendChild(comments);
      } catch (error) {
        this.handleError(error, "初始化评论组件失败");
      }
    },
    // 兼容原 escapeHTML
    escapeHTML: escapeHTML,
    customAccount: function () {
      return getFromLocal("halo-comment-custom-account");
    },
  };
  global.commentWidget = commentWidget;
})(typeof window !== "undefined" ? window : this);
